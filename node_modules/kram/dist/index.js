'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Kram = undefined;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _default = require('./default');

var _default2 = _interopRequireDefault(_default);

var _module2 = require('./module');

var modules = _interopRequireWildcard(_module2);

var _utils = require('./utils');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var moduleNames = Object.keys(modules); /**
                                         * @file index.js
                                         * @author tanglei (tanglei02@baidu.com)
                                         */

var Kram = exports.Kram = function () {

    /**
     * Kram constructor
     *
     * @param {Object=} config configure options
     */
    function Kram() {
        var _this = this;

        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        (0, _classCallCheck3.default)(this, Kram);

        this.module = {};

        // 模块实例化并挂载到 this.module 上
        // 因为模块间可能存在相互调用，因此先统一挂载，最后再初始化
        var inits = moduleNames.map(function (key) {
            return modules[key](_this);
        }).filter(function (init) {
            return !!init;
        });

        // 初始化默认参数与默认插件等等
        this.default = (0, _default2.default)(this);

        // 初始化配置
        this.config = (0, _utils.is)(Function, config) ? config(this) : config;

        // 初始化模块
        inits.forEach(function (fn) {
            return fn();
        });
    }

    /**
     * 将模块挂载到 .module 上
     * e.g. compiler.addModule('hello', () => 'world')
     * 那么 compiler.module.hello === 'world'
     *
     * @param {string} name module's name
     * @param {Function|Object} descriptor property descriptor or simply a getter function
     */


    (0, _createClass3.default)(Kram, [{
        key: 'addModule',
        value: function addModule(name, descriptor) {
            Object.defineProperty(this.module, name, (0, _utils.is)(Function, descriptor) ? { get: descriptor } : descriptor);
        }

        /**
         * 运行 kram
         *
         * @param {string|null} sourceName 需要加载的资源名称，为 null 时默认加载全部资源
         */

    }, {
        key: 'exec',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(sourceName) {
                var _module, loader, file, parser, menu, hook, sources, _ref2, _ref2$change, change, _ref2$remove, remove;

                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _module = this.module, loader = _module.loader, file = _module.file, parser = _module.parser, menu = _module.menu, hook = _module.hook;

                                // 通知运行开始

                                this.logger.info('[kram] execution start.');
                                _context.next = 4;
                                return hook.exec(hook.STAGES.START);

                            case 4:
                                _context.next = 6;
                                return loader.load(sourceName);

                            case 6:
                                sources = _context.sent;
                                _context.next = 9;
                                return file.process(sources);

                            case 9:
                                _ref2 = _context.sent;
                                _ref2$change = _ref2.change;
                                change = _ref2$change === undefined ? [] : _ref2$change;
                                _ref2$remove = _ref2.remove;
                                remove = _ref2$remove === undefined ? [] : _ref2$remove;

                                if (!(change.length + remove.length > 0)) {
                                    _context.next = 19;
                                    break;
                                }

                                _context.next = 17;
                                return parser.parseAndStore(change, remove);

                            case 17:
                                _context.next = 19;
                                return menu.generateAndStore();

                            case 19:
                                _context.next = 21;
                                return hook.exec(hook.STAGES.DONE);

                            case 21:
                                this.logger.info('[kram] execution done.');

                            case 22:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function exec(_x2) {
                return _ref.apply(this, arguments);
            }

            return exec;
        }()

        /**
         * 编译单片文档
         *
         * @return {Function} 编译方法
         */

    }, {
        key: 'on',


        /**
         * 监听钩子事件触发的回调，不阻塞执行流程
         *
         * @param {string} stage 事件名称
         * @param {Function} callback 回调
         */
        value: function on(stage, callback) {
            this.module.event.on(stage, callback);
        }
    }, {
        key: 'parse',
        get: function get() {
            return this.module.parser.parse;
        }

        /**
         * logger
         *
         * @return {Object} logger 对象
         */

    }, {
        key: 'logger',
        get: function get() {
            return this.module.logger;
        }

        /**
         * store object
         *
         * @return {Object} 存储对象，仅暴露 set get remove 三个方法
         */

    }, {
        key: 'store',
        get: function get() {
            return (0, _utils.subset)(this.module.store, ['set', 'get', 'remove']);
        }

        /**
         * 获取菜单
         *
         * @return {Function} 获取菜单的方法
         */

    }, {
        key: 'getMenu',
        get: function get() {
            return this.module.menu.getMenu;
        }

        /**
         * 获取菜单对象
         *
         * @return {Function} 获取菜单对象的方法
         */

    }, {
        key: 'getMenuItem',
        get: function get() {
            return this.module.menu.getMenuItem;
        }

        /**
         * 获取文档
         *
         * @return {Function} 获取文档对象的方法
         */

    }, {
        key: 'getDoc',
        get: function get() {
            return this.module.parser.get;
        }

        /**
         * 获取文件路径（包括文档和依赖文件）
         *
         * @return {Function} 获取文件路径的方法
         */

    }, {
        key: 'getFilePaths',
        get: function get() {
            return this.module.file.filePaths;
        }

        /**
         * 获取文件信息（包括文档和依赖文件）
         *
         * @return {Function} 获取文件信息的方法
         */

    }, {
        key: 'getFileInfos',
        get: function get() {
            return this.module.file.fileInfos;
        }

        /**
         * 获取文档文件路径
         *
         * @return {Function} 获取文档文件路径的方法
         */

    }, {
        key: 'getEntryPaths',
        get: function get() {
            return this.module.file.entryPaths;
        }

        /**
         * 获取文档文件信息
         *
         * @return {Function} 获取文档文件信息的方法
         */

    }, {
        key: 'getEntryInfos',
        get: function get() {
            return this.module.file.entryInfos;
        }

        /**
         * 插件列表
         *
         * @return {Array} 返回插件列表
         */

    }, {
        key: 'plugins',
        get: function get() {
            return this.module.plugin.list;
        }

        /**
         * 钩子列表
         *
         * @return {Array} 钩子列表
         */

    }, {
        key: 'STAGES',
        get: function get() {
            return this.module.hook.STAGES;
        }
    }]);
    return Kram;
}();