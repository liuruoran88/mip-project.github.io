'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _stylus = require('stylus');

var _stylus2 = _interopRequireDefault(_stylus);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Stylus = function () {
    function Stylus() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            priority = _ref.priority;

        (0, _classCallCheck3.default)(this, Stylus);

        this.priority = priority;
    }

    (0, _createClass3.default)(Stylus, [{
        key: 'apply',
        value: function apply(on, app) {
            on(app.module.hook.STAGES.AFTER_PARSE, function (md) {
                return md.replace(/<style([\s\S]*?)lang="stylus"([\s\S]*?)>([\s\S]*?)<\/style>/mg, function (str, attr1, attr2, css) {
                    if (empty(css)) {
                        return '';
                    }

                    try {
                        css = reomveExtraIndent(css);
                        css = _stylus2.default.render(css);
                        return '<style' + attr1 + attr2 + '>' + css + '</style>';
                    } catch (e) {
                        app.logger(e);
                        return '';
                    }
                });
            }, this.priority);
        }
    }]);
    return Stylus;
}(); /**
      * @file stylus 解析
      * @author tanglei (tanglei02@baidu.com)
      */

exports.default = Stylus;


function empty(css) {
    return css.split('\n').every(function (str) {
        return (/^[ ]*$/.test(str)
        );
    });
}

function reomveExtraIndent(css) {
    var arr = css.replace(/\t/mg, '    ').split('\n').filter(function (str) {
        return !/^[ ]*$/.test(str);
    });

    var spaceLen = arr.reduce(function (res, str) {
        return Math.min(res, indent(str));
    }, css.length);

    return arr.map(function (str) {
        return str.slice(spaceLen);
    }).join('\n');
}

function indent(str) {
    var max = str.length;
    for (var i = 0; i < max; i++) {
        if (str[i] !== ' ') {
            return i;
        }
    }
    return max;
}