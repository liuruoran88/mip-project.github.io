'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _utils = require('../../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @file 插入外部字符串
 * @author tanglei (tanglei02@baidu.com)
 */

var REGEX = /{{- *insert:(.*)?-}}/;
var REGEX_GLOBAL = new RegExp(REGEX, 'mg');

var Insert = function () {
    function Insert() {
        var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
            _ref$priority = _ref.priority,
            priority = _ref$priority === undefined ? 200 : _ref$priority;

        (0, _classCallCheck3.default)(this, Insert);

        this.priority = priority;
    }

    (0, _createClass3.default)(Insert, [{
        key: 'apply',
        value: function apply(on, app) {
            var _this = this;

            var _app$module$hook$STAG = app.module.hook.STAGES,
                AFTER_FILTER_FILE = _app$module$hook$STAG.AFTER_FILTER_FILE,
                FILTER_ENTRY = _app$module$hook$STAG.FILTER_ENTRY,
                BEFORE_PARSE = _app$module$hook$STAG.BEFORE_PARSE;


            var map = new Map();

            on(AFTER_FILTER_FILE, function (docInfos) {
                var _loop = function _loop(i) {
                    var info = docInfos[i];
                    var affects = map.get(info.path);

                    if (affects) {
                        var _loop2 = function _loop2(j) {
                            if (docInfos.every(function (info) {
                                return info.path !== affects[j].path;
                            })) {
                                docInfos.push(Object.assign({ type: 'modify' }, affects[j]));
                            }
                        };

                        for (var j = 0; j < affects.length; j++) {
                            _loop2(j);
                        }
                    }

                    if (info.type === 'delete') {
                        map.delete(info.path);
                    }
                };

                for (var i = 0; i < docInfos.length; i++) {
                    _loop(i);
                }

                return docInfos;
            });

            on(FILTER_ENTRY, function (entryInfos) {
                return entryInfos.filter(function (info) {
                    return !/\.partial\./.test(info.path);
                });
            });

            on(BEFORE_PARSE, function () {
                var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(md, options) {
                    var matches, insertPaths, fileInfos, replaceList, index;
                    return _regenerator2.default.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    matches = md.match(REGEX_GLOBAL);

                                    if (matches) {
                                        _context.next = 3;
                                        break;
                                    }

                                    return _context.abrupt('return');

                                case 3:
                                    insertPaths = matches.map(function (matched) {
                                        var originalPath = matched.match(REGEX)[1].trim();
                                        var fullPath = _path2.default.resolve(options.fullPath, '..', originalPath);
                                        return (0, _utils.relativePath)(app.config.basePath, fullPath);
                                    });


                                    insertPaths.forEach(function (insertPath) {
                                        if (!map.get(insertPath)) {
                                            map.set(insertPath, []);
                                        }

                                        if (map.get(insertPath).every(function (info) {
                                            return info.path !== options.path;
                                        })) {
                                            map.get(insertPath).push({
                                                path: options.path,
                                                md5: options.md5,
                                                file: options.file,
                                                fullPath: options.fullPath
                                            });
                                        }
                                    });

                                    _context.next = 7;
                                    return app.getFileInfos();

                                case 7:
                                    fileInfos = _context.sent;
                                    replaceList = insertPaths.map(function (insertPath) {
                                        var info = (0, _utils.first)(fileInfos, function (info) {
                                            return info.path === insertPath;
                                        });

                                        if (info) {
                                            return info.file;
                                        }

                                        app.logger.warn('[kram][plugin][insert] ' + insertPath + ' isn\'t exist');
                                        return '';
                                    });
                                    index = 0;
                                    return _context.abrupt('return', md.replace(REGEX_GLOBAL, function () {
                                        return replaceList[index++];
                                    }));

                                case 11:
                                case 'end':
                                    return _context.stop();
                            }
                        }
                    }, _callee, _this);
                }));

                return function (_x2, _x3) {
                    return _ref2.apply(this, arguments);
                };
            }(), this.priority);
        }
    }]);
    return Insert;
}();

exports.default = Insert;