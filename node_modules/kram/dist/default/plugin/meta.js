'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _utils = require('../../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Meta = function () {
    function Meta() {
        (0, _classCallCheck3.default)(this, Meta);
    }

    (0, _createClass3.default)(Meta, [{
        key: 'apply',
        value: function apply(on, app) {
            var _this = this;

            var _app$STAGES = app.STAGES,
                GET_CHANGED_FILES = _app$STAGES.GET_CHANGED_FILES,
                GET_CHANGED_ENTRY_FILES = _app$STAGES.GET_CHANGED_ENTRY_FILES,
                AFTER_FILE_PROCESS = _app$STAGES.AFTER_FILE_PROCESS,
                CREATE_MENU = _app$STAGES.CREATE_MENU;


            var isMetaChange = void 0;
            var isEntryFileChange = void 0;

            on(GET_CHANGED_FILES, function (fileInfos) {
                isMetaChange = fileInfos.some(function (info) {
                    return (/meta\.json$/.test(info.path)
                    );
                });
            });

            on(GET_CHANGED_ENTRY_FILES, function () {
                var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(entryInfos) {
                    return _regenerator2.default.wrap(function _callee$(_context) {
                        while (1) {
                            switch (_context.prev = _context.next) {
                                case 0:
                                    isEntryFileChange = !!entryInfos.length;

                                case 1:
                                case 'end':
                                    return _context.stop();
                            }
                        }
                    }, _callee, _this);
                }));

                return function (_x) {
                    return _ref.apply(this, arguments);
                };
            }());

            on(AFTER_FILE_PROCESS, (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                if (!(isMetaChange && !isEntryFileChange)) {
                                    _context2.next = 3;
                                    break;
                                }

                                _context2.next = 3;
                                return app.module.menu.generateAndStore();

                            case 3:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, _this);
            })));

            on(CREATE_MENU, function () {
                var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(menu, updateEntryInfos) {
                    var metaInfos, entryPaths, keyMap;
                    return _regenerator2.default.wrap(function _callee3$(_context3) {
                        while (1) {
                            switch (_context3.prev = _context3.next) {
                                case 0:
                                    _context3.next = 2;
                                    return app.getFileInfos(/meta\.json$/);

                                case 2:
                                    metaInfos = _context3.sent;

                                    if ((0, _utils.isValidArray)(metaInfos)) {
                                        _context3.next = 5;
                                        break;
                                    }

                                    return _context3.abrupt('return');

                                case 5:
                                    _context3.next = 7;
                                    return app.getEntryPaths();

                                case 7:
                                    entryPaths = _context3.sent;
                                    keyMap = entryPaths.reduce(function (map, path) {
                                        map[(0, _utils.removeExt)(path, '.md')] = true;
                                        return map;
                                    }, {});
                                    return _context3.abrupt('return', metaInfos.reduce(function (menu, info) {
                                        var meta = void 0;

                                        try {
                                            meta = completeMeta(info, keyMap);
                                        } catch (e) {
                                            app.logger.error('[kram][plugin][meta]', 'Error occur when complete meta.json');
                                            app.logger.error('[kram][plugin][meta]', e);
                                            return menu;
                                        }

                                        var parentKey = (0, _utils.join)(info.path, '..');
                                        var menuItem = findByKey(menu, parentKey);

                                        if (!menuItem) {
                                            return menu;
                                        }

                                        if ((0, _utils.isValidArray)(meta.ignore)) {
                                            ignoreMenu(menuItem, meta.ignore);
                                        }

                                        if ((0, _utils.is)(Object, meta.name)) {
                                            renameMenu(menuItem, meta.name);
                                        }

                                        if ((0, _utils.isValidArray)(meta.menu)) {
                                            adjustMenu(menuItem, meta.menu);
                                        }

                                        Object.assign(menuItem, (0, _utils.subset)(meta, ['ignore', 'name', 'menu'], true));

                                        return menu;
                                    }, menu));

                                case 10:
                                case 'end':
                                    return _context3.stop();
                            }
                        }
                    }, _callee3, _this);
                }));

                return function (_x2, _x3) {
                    return _ref3.apply(this, arguments);
                };
            }());
        }
    }]);
    return Meta;
}(); /**
      * @file organize menu by meta.json
      * @author tanglei (tanglei02@baidu.com)
      */

exports.default = Meta;


function completeMeta(info, keyMap) {
    var parentKey = (0, _utils.join)(info.path, '..');
    var meta = JSON.parse(info.file);

    if ((0, _utils.isValidArray)(meta.menu)) {
        meta.menu = completeMenu(meta.menu, keyMap, parentKey, parentKey);
    }

    if ((0, _utils.isValidArray)(meta.ignore)) {
        meta.ignore = completeIgnore(meta.ignore, parentKey);
    }

    if ((0, _utils.is)(Object, meta.name)) {
        meta.name = completeName(meta.name, parentKey);
    }

    return meta;
}

function completeMenu(menus, keyMap) {
    var parentKey = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
    var rootKey = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';

    // 初步过滤
    return menus.filter(function (menu) {
        return (0, _utils.is)(Object, menu) && !!(menu.key || menu.url && menu.name);
    })
    // key 补全
    .map(function (menu) {
        // 配了 url 链接的 menu 直接返回
        if (!menu.key) {
            return menu;
        }

        var newKey = completeKey(menu.key, parentKey);

        // 判断补全结果是否存在，如果不存在就还是拿补全前的 key
        if (isValidKey(newKey, keyMap)) {
            menu.key = newKey;
            return menu;
        }

        if (!rootKey) {
            return menu;
        }

        newKey = completeKey(menu.key, rootKey);

        if (isValidKey(newKey, keyMap)) {
            menu.key = newKey;
        }

        return menu;
    })
    // 去掉无效项
    .filter(function (menu) {
        return !menu.key || isValidKey(menu.key, keyMap);
    })
    // 去掉重复项
    .reduce(function (res, menu) {
        if (!menu.key || !res.some(function (m) {
            return m.key === menu.key;
        })) {
            res.push(menu);
        }

        return res;
    }, [])
    // 遍历子节点
    .map(function (menu) {
        if ((0, _utils.isValidArray)(menu.children)) {
            menu.children = completeMenu(menu.children, keyMap, menu.key, rootKey);
        }

        return menu;
    }).filter(function (menu) {
        return menu.children == null || (0, _utils.isValidArray)(menu.children);
    });
}

function completeName(names) {
    var parentKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

    return Object.keys(names).filter(function (key) {
        return key !== '';
    }).reduce(function (res, key) {
        return (0, _utils.set)(res, completeKey(key, parentKey), names[key]);
    }, {});
}

function completeIgnore(ignores) {
    var parentKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

    return ignores.map(function (ignore) {
        return completeKey(ignore, parentKey);
    });
}

function completeKey(key) {
    var parentKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

    return (0, _utils.startWith)(key, parentKey) ? key : (0, _utils.join)(parentKey, key);
}

function isValidKey(key, keyMap) {
    return isDocKey(key, keyMap) || isFolderKey(key, keyMap);
}

function isDocKey(key, keyMap) {
    return keyMap[key];
}

function isFolderKey(key, keyMap) {
    return Object.keys(keyMap).some(function (k) {
        return (0, _utils.startWith)(k, key + '/');
    });
}

function findByKey(menu, key) {
    if (!(0, _utils.isValidArray)(menu)) {
        return;
    }

    for (var i = 0; i < menu.length; i++) {
        var item = menu[i];
        if (item.path === key) {
            return item;
        }

        if ((0, _utils.startWith)(key, item.path) && (0, _utils.isValidArray)(item.children)) {
            return findByKey(item.children, key);
        }
    }
}

function ignoreMenu(menuItem, ignoreList) {
    menuItem.children = menuItem.children.reduce(function (list, child) {
        if ((0, _utils.contain)(ignoreList, (0, _utils.removeExt)(child.path, '.md'))) {
            return list;
        }

        if ((0, _utils.isValidArray)(child.children)) {
            ignoreMenu(child, ignoreList);
        }

        list.push(child);
        return list;
    }, []);
}

function renameMenu(menuItem, nameMap) {
    if ((0, _utils.isValidArray)(menuItem.children)) {
        menuItem.children = menuItem.children.map(function (child) {
            var key = (0, _utils.removeExt)(child.path, '.md');
            var name = nameMap[key];
            if (name) {
                child.name = name;
            }

            if ((0, _utils.isValidArray)(child.children)) {
                renameMenu(child, nameMap);
            }

            return child;
        });
    }
}

function adjustMenu(menuItem, metaMenu) {
    if (!(0, _utils.isValidArray)(menuItem.children)) {
        return;
    }

    var indexMap = metaMenu.reduce(function (obj, item, i) {
        obj[item.key] = i;
        return obj;
    }, {});

    menuItem.children = menuItem.children.reduce(function (list, child) {
        var key = (0, _utils.removeExt)(child.path, '.md');
        var index = indexMap[key];

        if (index == null) {
            list.push(child);
        } else {
            var metaMenuItem = metaMenu[index];
            Object.assign(child, (0, _utils.subset)(metaMenuItem, ['children', 'key'], true));

            if ((0, _utils.isValidArray)(metaMenuItem.children) && (0, _utils.isValidArray)(child.children)) {
                adjustMenu(child, metaMenuItem.children);
            }

            list[index] = child;
        }

        return list;
    }, new Array(metaMenu.length)).filter(function (item) {
        return !!item;
    });
}