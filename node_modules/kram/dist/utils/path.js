'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.sep = sep;
exports.join = join;
exports.removeExt = removeExt;
exports.removePrefix = removePrefix;
exports.level = level;
exports.getPaths = getPaths;
exports.isSubpath = isSubpath;
exports.relativePath = relativePath;

var _glob = require('glob');

var _glob2 = _interopRequireDefault(_glob);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 路径分隔符替换 由 windows 上的 \ 分隔符统一替换成 /
 *
 * @param {string} str 路径字符串
 * @return {string} 处理好的路径
 */
/**
 * @file 路径处理相关
 * @author tanglei (tanglei02@baidu.com)
 */

function sep(str) {
    return str.replace(/\\/g, '/').replace(/\/$/, '');
}

/**
 * 生成以 / 为分隔符的路径
 *
 * @param {...string} arr 待拼接的路径
 * @return {string} 拼接好的路径
 */
function join() {
    return sep(_path2.default.join.apply(_path2.default, arguments));
}

/**
 * 去除路径中的后缀
 * 如：a/b/c.txt => a/b/c
 *
 * @param {string} str 待处理路径字符串
 * @param {string} ext 待去除的尾缀
 * @return {string} 去除后的路径字符串
 */
function removeExt(str, ext) {
    var len = ext.length;

    if (str.slice(-len) === ext) {
        return str.slice(0, -len);
    }

    return str;
}

/**
 * 移除路径前缀
 *
 * @param {string} str 待处理的路径字符串
 * @param {string} prefix 路径前缀
 * @return {string} 移除后的结果
 */
function removePrefix(str, prefix) {
    var len = prefix.length;
    if (str.slice(0, len) === prefix) {
        str = str.slice(len);

        if (str[0] === '/') {
            return str.slice(1);
        }
    }

    return str;
}

/**
 * 获取路径层级
 *
 * @param {string} dir 路径字符串
 * @return {number} 路径层级
 */
function level(dir) {
    return dir.split('/').length;
}

/**
 * 获取特定目录下的满足特定后缀名文件的全部路径
 *
 * @param {string} basePath 目录路径
 * @param {string|Array} ext 后缀名 or 列表
 * @return {Array} 全部路径
 */
function getPaths(basePath) {
    var ext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

    var extStr = void 0;

    if (Array.isArray(ext)) {
        extStr = '@(' + ext.join('|') + ')';
    } else {
        extStr = ext;
    }

    return new Promise(function (resolve, reject) {
        (0, _glob2.default)(_path2.default.resolve(basePath, '**/*' + extStr), function (err, dirs) {
            if (err) {
                reject(err);
            } else {
                resolve(dirs);
            }
        });
    });
}

/**
 * a 是否为 b 的子路径
 *
 * @param {string} subpath 待检测的路径
 * @param {string} rootpath 根路径
 * @return {boolean} 判断 subpath 是否在 rootpath 下
 */
function isSubpath(subpath, rootpath) {
    var relativePath = _path2.default.relative(subpath, rootpath);
    return relativePath.split(_path2.default.sep).every(function (str) {
        return str === '..';
    });
}

/**
 * 获取相对路径
 *
 * @param {string} from 出发路径
 * @param {string} to 目标路径
 * @return {string} 相对路径
 */
function relativePath(from, to) {
    return sep(_path2.default.relative(from, to));
    // return removePrefix(sep(dir), sep(baseDir))
}