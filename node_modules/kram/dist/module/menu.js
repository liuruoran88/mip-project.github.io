'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

exports.default = function (app) {

    var menuModule = {

        /**
         * 生成目录
         *
         * @return {MenuTree} 目录
         */
        generate: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
                var _this = this;

                var getEntryPaths, logger, store, hook, CREATE_MENU, entryPaths, entrys, menu;
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                getEntryPaths = app.getEntryPaths, logger = app.logger, store = app.store, hook = app.module.hook, CREATE_MENU = app.STAGES.CREATE_MENU;

                                // 获取文档全部路径

                                _context2.next = 3;
                                return getEntryPaths();

                            case 3:
                                entryPaths = _context2.sent;

                                if ((0, _utils.isValidArray)(entryPaths)) {
                                    _context2.next = 7;
                                    break;
                                }

                                logger.warn('[kram] no entry file information for generating menu.');
                                return _context2.abrupt('return', []);

                            case 7:
                                _context2.next = 9;
                                return Promise.all(entryPaths.map(function () {
                                    var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(entryPath) {
                                        var storeInfo;
                                        return _regenerator2.default.wrap(function _callee$(_context) {
                                            while (1) {
                                                switch (_context.prev = _context.next) {
                                                    case 0:
                                                        _context.next = 2;
                                                        return store.get('doc', entryPath);

                                                    case 2:
                                                        storeInfo = _context.sent;
                                                        return _context.abrupt('return', {
                                                            info: storeInfo.info,
                                                            path: entryPath,
                                                            url: storeInfo.url
                                                        });

                                                    case 4:
                                                    case 'end':
                                                        return _context.stop();
                                                }
                                            }
                                        }, _callee, _this);
                                    }));

                                    return function (_x) {
                                        return _ref2.apply(this, arguments);
                                    };
                                }()));

                            case 9:
                                entrys = _context2.sent;


                                // 生成目录
                                menu = createMenu(entrys);
                                _context2.next = 13;
                                return hook.exec(CREATE_MENU, menu, entrys);

                            case 13:
                                return _context2.abrupt('return', _context2.sent);

                            case 14:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function generate() {
                return _ref.apply(this, arguments);
            }

            return generate;
        }(),


        /**
         * 遍历查找目录元素
         *
         * @param {string=} path 查找条件
         * @return {Array|Object} 当查找条件为空时返回全部的目录信息，
         * 有条件则返回查找到的目录元素节点信息
         */
        getMenuItem: function () {
            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(path) {
                var menu;
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                _context3.next = 2;
                                return app.store.get('menu', 'all');

                            case 2:
                                menu = _context3.sent;

                                if (!(!path || !menu)) {
                                    _context3.next = 5;
                                    break;
                                }

                                return _context3.abrupt('return', menu);

                            case 5:
                                return _context3.abrupt('return', (0, _utils.getMenuItem)(menu, path));

                            case 6:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function getMenuItem(_x2) {
                return _ref3.apply(this, arguments);
            }

            return getMenuItem;
        }(),


        /**
         * 获取目录
         *
         * @param {string=} path 查找条件
         * @return {MenuTree} 满足条件的目录 或者 子目录
         */
        getMenu: function () {
            var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(path) {
                var menuItem;
                return _regenerator2.default.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                _context4.next = 2;
                                return menuModule.getMenuItem(path);

                            case 2:
                                menuItem = _context4.sent;
                                return _context4.abrupt('return', menuItem && menuItem.children);

                            case 4:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));

            function getMenu(_x3) {
                return _ref4.apply(this, arguments);
            }

            return getMenu;
        }(),


        /**
         * 存储编译生成好的目录
         *
         * @param {MenuTree} menu 目录
         */
        store: function () {
            var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(menu) {
                return _regenerator2.default.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                _context5.next = 2;
                                return app.store.set('menu', 'all', menu);

                            case 2:
                            case 'end':
                                return _context5.stop();
                        }
                    }
                }, _callee5, this);
            }));

            function store(_x4) {
                return _ref5.apply(this, arguments);
            }

            return store;
        }(),


        /**
         * 编译生成目录后存储
         */
        generateAndStore: function () {
            var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6() {
                var menuInfo;
                return _regenerator2.default.wrap(function _callee6$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                _context6.next = 2;
                                return menuModule.generate();

                            case 2:
                                menuInfo = _context6.sent;
                                _context6.next = 5;
                                return menuModule.store(menuInfo);

                            case 5:
                            case 'end':
                                return _context6.stop();
                        }
                    }
                }, _callee6, this);
            }));

            function generateAndStore() {
                return _ref6.apply(this, arguments);
            }

            return generateAndStore;
        }()
    };

    app.addModule('menu', function () {
        return menuModule;
    });
};

var _utils = require('../utils');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 利用文档信息生成树状目录结构
 *
 * @param {Array} entrys 文档信息列表
 * @return {MenuTree} 生成好的树状目录结构
 */
function createMenu(entrys) {
    var tree = entrys.map(function (info) {
        var extname = _path2.default.extname(info.path);
        var basename = _path2.default.basename(info.path, extname);

        var obj = {
            path: info.path,
            url: info.url,
            levels: getPathLevel(info.path),
            title: (0, _utils.get)(info, 'info.title') || (0, _utils.get)(info, 'chapter[0].text') || basename
        };

        return obj;
    }).sort(function (a, b) {
        return a.path.localeCompare(b.path);
    }).reduce(function (tree, info) {
        return appendToTree(tree, info.levels, info);
    }, []);

    return treeToMenu(tree);
} /**
   * @file menu manager 生成文档目录结构的模块
   * @author tanglei (tanglei02@baidu.com)
   */

function getPathLevel(path) {
    return path.split('/').filter(function (str) {
        return str !== '';
    });
}

function appendToTree(tree, levels, info) {
    var levelLen = levels.length;
    var node = tree;

    for (var i = 0; i < levelLen; i++) {
        var nodeLen = node.length;
        var j = void 0;

        for (j = 0; j < nodeLen; j++) {
            if (node[j].name === levels[i]) {
                if (i === levelLen - 1) {
                    node[j].info = info;
                } else {
                    node[j].children = node[j].children || [];
                    node = node[j].children;
                }

                break;
            }
        }

        if (j === nodeLen) {
            if (i === levelLen - 1) {
                node.push({
                    name: levels[i],
                    info: info
                });
            } else {
                node.push({
                    name: levels[i],
                    path: levels.slice(0, i + 1).join('/'),
                    children: []
                });
                node = node[j].children;
            }
        }
    }

    return tree;
}

function treeToMenu(tree) {
    return tree.map(function (node) {
        var obj = {};

        if (node.children) {
            obj.name = node.name;
            obj.path = node.path;
            obj.children = treeToMenu(node.children);
        } else {
            obj.name = node.info.title;
            obj.path = node.info.path;
            obj.url = node.info.url;
        }

        return obj;
    });
}