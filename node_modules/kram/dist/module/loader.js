'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

exports.default = function (app) {
    var config = {};

    var loader = {
        get config() {
            return config;
        },

        get default() {
            return app.default.config.loader;
        },

        /**
         * 添加加载器
         *
         * @param {string} name 加载器名称
         * @param {Function} fn 加载方法
         */
        add: function add(name, fn) {
            if (!config[name]) {
                config[name] = fn;
            }
        },
        get: function get(name) {
            return config[name];
        },


        /**
         * 加载单个资源
         *
         * @param {Object} source 资源配置
         * @return {Object} 资源配置信息
         */
        loadOne: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(source) {
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                app.logger.info('[kram] load start: ' + source.name);
                                _context.next = 3;
                                return loader.get(source.loader)(source, app);

                            case 3:
                                app.logger.info('[kram] load finish: ' + source.name);
                                return _context.abrupt('return', source);

                            case 5:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function loadOne(_x) {
                return _ref.apply(this, arguments);
            }

            return loadOne;
        }(),


        /**
         * 加载单个/多个资源
         *
         * @param {string=} sourceName 资源名称，默认为空时加载全部资源
         * @return {Promise} promise 对象
         */
        load: function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(sourceName) {
                var sources, source;
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                sources = void 0;


                                if (sourceName) {
                                    source = (0, _utils.first)(app.config.sources, function (source) {
                                        return source.name === sourceName;
                                    });

                                    sources = [source];
                                } else {
                                    sources = app.config.sources;
                                }

                                _context2.next = 4;
                                return app.module.plugin.exec(_stage.BEFORE_LOAD, sources);

                            case 4:
                                sources = _context2.sent;
                                _context2.next = 7;
                                return Promise.all(sources.map(function (source) {
                                    return loader.loadOne(source);
                                }));

                            case 7:
                                _context2.next = 9;
                                return app.module.plugin.exec(_stage.AFTER_LOAD, sources);

                            case 9:
                                return _context2.abrupt('return', _context2.sent);

                            case 10:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function load(_x2) {
                return _ref2.apply(this, arguments);
            }

            return load;
        }()
    };

    // 注册 loader 模块
    app.addModule('loader', function () {
        return loader;
    });

    // loader 初始化函数
    return function () {
        var loaders = Object.assign({}, loader.default, app.config.loader);
        (0, _utils.each)(loaders, loader.add);
    };
};

var _stage = require('./hook/stage');

var _utils = require('../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }