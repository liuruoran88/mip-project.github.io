'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _toArray2 = require('babel-runtime/helpers/toArray');

var _toArray3 = _interopRequireDefault(_toArray2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

exports.default = function (app) {
    var chapterPlugin = new Chapter();
    return function () {
        app.module.plugin.register('chapter', chapterPlugin);
    };
};

var _utils = require('../../utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Chapter = function () {
    function Chapter() {
        (0, _classCallCheck3.default)(this, Chapter);
    }

    (0, _createClass3.default)(Chapter, [{
        key: 'apply',
        value: function apply(on, app) {
            var _app$module$hook$STAG = app.module.hook.STAGES,
                RENDER_HEADING = _app$module$hook$STAG.RENDER_HEADING,
                CREATE_DOC_STORE_OBJECT = _app$module$hook$STAG.CREATE_DOC_STORE_OBJECT,
                DONE = _app$module$hook$STAG.DONE;


            var map = new Map();

            on(RENDER_HEADING, function (html, _ref) {
                var _ref$args = (0, _slicedToArray3.default)(_ref.args, 3),
                    text = _ref$args[0],
                    level = _ref$args[1],
                    raw = _ref$args[2],
                    path = _ref.path;

                // 从每篇文章的 h1 - h6 标签中提取出 hash
                var hash = '#' + raw.trim().toLowerCase().replace(/[^0-9a-zA-Z_ \u0391-\uFFE5+]/g, '').replace(/ +/g, '-');

                // 提取内容
                var content = (0, _utils.plainify)(html);

                var info = map.get(path) || { hashMap: {}, list: [] };

                if (info.hashMap[hash] == null) {
                    info.hashMap[hash] = 0;
                } else {
                    info.hashMap[hash]++;
                    hash += info.hashMap[hash];
                }

                info.list.push({ level: level, hash: hash, text: content });
                map.set(path, info);

                // 生成新的 h1 - h6
                return html.replace(/(<h[1-6])(>| [^<]*?>)/mg, function (str, start, end) {
                    end = end.slice(0, -1) + (' data-hash="' + hash + '">');
                    return start + end;
                });
            });

            on(CREATE_DOC_STORE_OBJECT, function (obj) {
                var info = map.get(obj.path);
                if (!(0, _utils.get)(info, 'list.length')) {
                    app.logger.warn('[kram][chapter] no title information in ' + obj.path);
                    return;
                }

                // 挂载到文档存储对象中
                obj.chapters = buildTree(info.list);
                return obj;
            });

            on(DONE, function () {
                // 清理缓存
                map = new Map();
            });
        }
    }]);
    return Chapter;
}();

/**
 * 通过章节标题生成树形结构的章节数据
 *
 * @param {Array} arr 章节标题数组
 * @return {Array} 树形结构
 */
/**
 * @file 生成文章章节结构的插件
 * @author tangei (tanglei02@baidu.com)
 */


function buildTree(arr) {
    if (!(0, _utils.isValidArray)(arr)) {
        return arr;
    }

    var _arr = (0, _toArray3.default)(arr),
        first = _arr[0],
        rest = _arr.slice(1);

    return rest.reduce(function (res, info) {
        var last = res[res.length - 1];

        if (last.level < info.level) {
            last.children = (0, _utils.ensureArray)(last.children).concat(info);
        } else {
            res.push(info);
        }

        return res;
    }, [first]).map(function (info) {
        if (info.children) {
            info.children = buildTree(info.children);
        }

        return info;
    });
}