'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

exports.default = function (app) {
    var routes = void 0;
    var plugin = new URLPlugin();

    var router = {
        get routes() {
            return routes;
        },
        set routes(val) {
            routes = val;
            plugin.setRoutes(val);
        },
        get addRoute() {
            return plugin.addRoute;
        }
    };

    app.addModule('router', function () {
        return router;
    });

    return function () {
        router.routes = app.config.routes;
        app.module.plugin.register('processURL', plugin);
    };
};

var _utils = require('../../utils');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @file url.js 处理 url 配置的方法
 * @author tanglei (tanglei02@baidu.com)
 */

var URLPlugin = function () {
    function URLPlugin(routes) {
        (0, _classCallCheck3.default)(this, URLPlugin);

        this.priority = 500;
        this.routes = [];
        this.setRoutes(routes);
    }

    (0, _createClass3.default)(URLPlugin, [{
        key: 'apply',
        value: function apply(on, app) {
            var _this = this;

            var basePath = app.config.basePath;

            var _app$STAGES = app.STAGES,
                AFTER_PARSE = _app$STAGES.AFTER_PARSE,
                CREATE_DOC_STORE_OBJECT = _app$STAGES.CREATE_DOC_STORE_OBJECT;


            on(AFTER_PARSE, function (html, info) {
                if (!info) {
                    return;
                }

                // 将所有相对路径的 url 根据配置中的 routes 规则进行替换
                return html.replace(/(<[a-zA-Z0-9-]+ [^<]*?)(href|src)=(.*?)(>| [^<]*?>)/mg, function (str, arrowStart, propName, url, arrowEnd) {
                    var quote = getQuote(url);

                    if (quote) {
                        url = url.slice(1, -1);
                    }

                    if (!(0, _utils.isRelativeUrl)(url)) {
                        return str;
                    }

                    url = _path2.default.join(info.fullPath, '..', url);
                    url = (0, _utils.relativePath)(basePath, url);

                    var route = _this.getRoute(url);

                    if (!route) {
                        return str;
                    }

                    var newUrl = (0, _utils.is)(Function, route.url) ? route.url(url) : route.url;

                    if (quote) {
                        newUrl = quote + newUrl + quote;
                    }

                    return '' + arrowStart + propName + '=' + newUrl + arrowEnd;
                });
            }, this.priority);

            on(CREATE_DOC_STORE_OBJECT, function (info) {
                var route = _this.getRoute(info.path);

                if (!route) {
                    return;
                }

                info.url = (0, _utils.is)(Function, route.url) ? route.url(info.path) : route.url;
                return info;
            });
        }

        /**
         * 添加路由匹配与替换规则列表
         *
         * @param {Array} routes 路由匹配规则与替换列表
         */

    }, {
        key: 'setRoutes',
        value: function setRoutes(routes) {
            if (routes) {
                this.routes = (0, _utils.ensureArray)(routes);
            }
        }

        /**
         * 增量式增加匹配与替换规则
         *
         * @param {Object} route route 规则
         * @param {Function} route.path url 匹配规则
         * @param {Function} route.url 映射到的新的 url
         */

    }, {
        key: 'addRoute',
        value: function addRoute(route) {
            this.routes.push(route);
        }

        /**
         * 遍历查找 url 匹配到的对应的 route 规则
         *
         * @param {string} key 匹配规则
         * @return {Object} route 规则
         */

    }, {
        key: 'getRoute',
        value: function getRoute(key) {
            for (var i = 0; i < this.routes.length; i++) {

                var route = this.routes[i];

                switch ((0, _typeof3.default)(route.path)) {
                    case 'string':
                        if (route.path === key) {
                            return route;
                        }

                        break;

                    case 'object':
                        if (route.path.test(key)) {
                            return route;
                        }

                        break;

                    case 'function':
                        if (route.path(key)) {
                            return route;
                        }

                        break;

                    default:
                        break;
                }
            }
        }
    }]);
    return URLPlugin;
}();

function getQuote(str) {
    if (str.length < 2) {
        return;
    }

    var start = str[0];
    var end = str.slice(-1);

    if (start === end) {
        return start;
    }

    return;
}