'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

exports.default = function (app) {
    var options = {
        get renderer() {
            return app.module.renderer.methods;
        }
    };

    var markedOptions = {
        get renderer() {
            return app.module.renderer.renderer;
        }
    };

    var parser = {
        get default() {
            return app.default.config.parser;
        },

        get options() {
            return options;
        },

        /**
         * 设置 marked 的参数
         *
         * @param {Object} val marked 编译参数
         */
        setOptions: function setOptions() {
            var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            var otherOptions = (0, _utils.subset)(val, ['renderer'], 'ignore');
            Object.assign(options, otherOptions);
            Object.assign(markedOptions, otherOptions);

            if (val.renderer) {
                parser.setRenderer(val.renderer);
            }
        },


        /**
         * 设置 renderer
         *
         * @param {...*} args 将参数透传到 renderer 模块
         */
        setRenderer: function setRenderer() {
            var _app$module$renderer;

            (_app$module$renderer = app.module.renderer).setRenderer.apply(_app$module$renderer, arguments);
        },


        /**
         * 编译单篇文档
         *
         * @param {Object} fileInfo 文档信息
         * @return {Object} 解析好的文档信息
         */
        parseOne: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(fileInfo) {
                var _app$module, renderer, hook, md, html, storeInfo;

                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _app$module = app.module, renderer = _app$module.renderer, hook = _app$module.hook;
                                _context.prev = 1;
                                _context.next = 4;
                                return hook.exec(_stage.BEFORE_PARSE, fileInfo.file, fileInfo);

                            case 4:
                                md = _context.sent;

                                renderer.hookOptions = fileInfo;

                                html = (0, _marked2.default)(md, markedOptions);
                                _context.next = 9;
                                return hook.exec(_stage.AFTER_PARSE, html, fileInfo);

                            case 9:
                                html = _context.sent;
                                storeInfo = {
                                    path: fileInfo.path,
                                    html: html
                                };
                                _context.next = 13;
                                return hook.exec(_stage.CREATE_DOC_STORE_OBJECT, storeInfo);

                            case 13:
                                storeInfo = _context.sent;
                                return _context.abrupt('return', storeInfo);

                            case 17:
                                _context.prev = 17;
                                _context.t0 = _context['catch'](1);

                                app.logger.info(_context.t0);

                            case 20:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this, [[1, 17]]);
            }));

            function parseOne(_x2) {
                return _ref.apply(this, arguments);
            }

            return parseOne;
        }(),


        /**
         * 编译单篇/多篇文档
         *
         * @param {Object|Array} fileInfos 文档信息
         * @return {Object|Array} 解析好的文档信息
         */
        parse: function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(fileInfos) {
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                if (!Array.isArray(fileInfos)) {
                                    _context2.next = 4;
                                    break;
                                }

                                if (!fileInfos.length) {
                                    _context2.next = 3;
                                    break;
                                }

                                return _context2.abrupt('return', Promise.all(fileInfos.map(parser.parseOne)));

                            case 3:
                                return _context2.abrupt('return', []);

                            case 4:
                                return _context2.abrupt('return', parser.parseOne(fileInfos));

                            case 5:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function parse(_x3) {
                return _ref2.apply(this, arguments);
            }

            return parse;
        }(),


        /**
         * 存储编译好的文档，删除被标记为‘remove’的文档
         *
         * @param {...Array} args 编译好的文档信息
         */
        store: function () {
            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4() {
                var _this = this;

                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                    args[_key] = arguments[_key];
                }

                var infos;
                return _regenerator2.default.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                infos = (0, _utils.flatten)(args);
                                _context4.next = 3;
                                return Promise.all(infos.filter(function (info) {
                                    return !!info;
                                }).map(function () {
                                    var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(info) {
                                        return _regenerator2.default.wrap(function _callee3$(_context3) {
                                            while (1) {
                                                switch (_context3.prev = _context3.next) {
                                                    case 0:
                                                        if (!(info.type === 'remove')) {
                                                            _context3.next = 5;
                                                            break;
                                                        }

                                                        _context3.next = 3;
                                                        return app.store.remove('doc', info.path);

                                                    case 3:
                                                        _context3.next = 7;
                                                        break;

                                                    case 5:
                                                        _context3.next = 7;
                                                        return app.store.set('doc', info.path, info);

                                                    case 7:
                                                    case 'end':
                                                        return _context3.stop();
                                                }
                                            }
                                        }, _callee3, _this);
                                    }));

                                    return function (_x4) {
                                        return _ref4.apply(this, arguments);
                                    };
                                }()));

                            case 3:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));

            function store() {
                return _ref3.apply(this, arguments);
            }

            return store;
        }(),


        /**
         * 文档的编译 + 存储
         *
         * @param {Array} change 有变化的文档信息
         * @param {Array} remove 删除的文档信息
         */
        parseAndStore: function () {
            var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(change, remove) {
                var docInfos;
                return _regenerator2.default.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                _context5.next = 2;
                                return parser.parse(change);

                            case 2:
                                docInfos = _context5.sent;
                                _context5.next = 5;
                                return parser.store(docInfos, remove);

                            case 5:
                            case 'end':
                                return _context5.stop();
                        }
                    }
                }, _callee5, this);
            }));

            function parseAndStore(_x5, _x6) {
                return _ref5.apply(this, arguments);
            }

            return parseAndStore;
        }(),


        /**
         * 获取编译好的文档信息
         *
         * @param {string} path 文档路径
         * @return {Object|undefined} 文档信息
         */
        get: function get(path) {
            return app.store.get('doc', path);
        }
    };

    app.addModule('parser', function () {
        return parser;
    });

    return function () {
        var renderer = Object.assign({}, parser.default.renderer, (0, _utils.get)(app.config.parser, 'renderer'));
        parser.setOptions(Object.assign({}, parser.default, app.config.parser, { renderer: renderer }));
    };
};

var _marked = require('marked');

var _marked2 = _interopRequireDefault(_marked);

var _utils = require('../../utils');

var _stage = require('../hook/stage');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }