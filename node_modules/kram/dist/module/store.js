'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

exports.default = function (app) {

    // 存储相关配置信息
    var options = void 0;

    // 仓库实例
    var storage = void 0;

    var store = {
        get storage() {
            return storage;
        },

        set storage(val) {
            storage = val;
        },

        get options() {
            return options;
        },

        set options(val) {
            if (val) {
                options = Object.assign({}, store.default.options, options, val);
            }
        },

        get default() {
            return app.default.config.store;
        },

        /**
         * 写
         *
         * @param {string} type 类型标识
         * @param {string} key key
         * @param {*} value 写入的数据
         * @return {Promise} promise 对象
         */
        set: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(type, key, value) {
                var name;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                name = generateKey(type, key, options);
                                _context.next = 3;
                                return storage.set(name, value);

                            case 3:
                                return _context.abrupt('return', _context.sent);

                            case 4:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function set(_x, _x2, _x3) {
                return _ref.apply(this, arguments);
            }

            return set;
        }(),


        /**
         * 读
         *
         * @param {string} type 类型标识
         * @param {string} key key
         * @return {*} 读取结果
         */
        get: function () {
            var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(type, key) {
                var name;
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                name = generateKey(type, key, options);
                                _context2.next = 3;
                                return storage.get(name);

                            case 3:
                                return _context2.abrupt('return', _context2.sent);

                            case 4:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));

            function get(_x4, _x5) {
                return _ref2.apply(this, arguments);
            }

            return get;
        }(),


        /**
         * 删
         *
         * @param {string} type 类型标识
         * @param {string} key key
         * @return {Promise} promise 对象
         */
        remove: function () {
            var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(type, key) {
                var name;
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                name = generateKey(type, key, options);
                                _context3.next = 3;
                                return storage.remove(name);

                            case 3:
                                return _context3.abrupt('return', _context3.sent);

                            case 4:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));

            function remove(_x6, _x7) {
                return _ref3.apply(this, arguments);
            }

            return remove;
        }()
    };

    app.addModule('store', function () {
        return store;
    });

    return function () {
        var _ref4 = app.config.store || {},
            _ref4$options = _ref4.options,
            options = _ref4$options === undefined ? store.default.options : _ref4$options,
            _ref4$storage = _ref4.storage,
            storage = _ref4$storage === undefined ? store.default.storage : _ref4$storage;

        store.storage = storage;
        store.options = options;
    };
};

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 生成存储 key 的方法
 *
 * @param {string} type 类型标识
 * @param {string} key key
 * @param {Object} options options
 * @param {string} options.prefix 统一前缀
 * @param {string} options.delimiter 统一分隔符
 * @return {string} 实际存储的 key
 */
function generateKey(type, key, _ref5) {
    var prefix = _ref5.prefix,
        delimiter = _ref5.delimiter;

    return [prefix, type, key].join(delimiter);
} /**
  * @file store module
  * @author tanglei (tanglei02@baidu.com)
  */