'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

exports.default = function (app) {

    /**
     * 将源文件转换成文件信息列表
     *
     * @param {Object} source source config object
     * @return {Array} file info list in this source
     */
    var getFileInfos = function () {
        var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(source) {
            var _this = this;

            var infoChunk, paths;
            return _regenerator2.default.wrap(function _callee2$(_context2) {
                while (1) {
                    switch (_context2.prev = _context2.next) {
                        case 0:
                            if (!Array.isArray(source)) {
                                _context2.next = 5;
                                break;
                            }

                            _context2.next = 3;
                            return Promise.all(source.map(getFileInfos));

                        case 3:
                            infoChunk = _context2.sent;
                            return _context2.abrupt('return', (0, _utils.flatten)(infoChunk));

                        case 5:
                            _context2.next = 7;
                            return (0, _utils.getPaths)(source.to, WHITE_LIST);

                        case 7:
                            paths = _context2.sent;
                            _context2.next = 10;
                            return Promise.all(paths.map(function () {
                                var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(fullPath) {
                                    var file;
                                    return _regenerator2.default.wrap(function _callee$(_context) {
                                        while (1) {
                                            switch (_context.prev = _context.next) {
                                                case 0:
                                                    _context.next = 2;
                                                    return _fsExtra2.default.readFile(fullPath, 'utf-8');

                                                case 2:
                                                    file = _context.sent;
                                                    return _context.abrupt('return', {
                                                        path: (0, _utils.relativePath)(app.config.basePath, fullPath),
                                                        fullPath: fullPath,
                                                        file: file,
                                                        md5: createMD5(file),
                                                        source: source
                                                    });

                                                case 4:
                                                case 'end':
                                                    return _context.stop();
                                            }
                                        }
                                    }, _callee, _this);
                                }));

                                return function (_x2) {
                                    return _ref2.apply(this, arguments);
                                };
                            }()));

                        case 10:
                            return _context2.abrupt('return', _context2.sent);

                        case 11:
                        case 'end':
                            return _context2.stop();
                    }
                }
            }, _callee2, this);
        }));

        return function getFileInfos(_x) {
            return _ref.apply(this, arguments);
        };
    }();

    /**
     * 找出加载的文件信息里面哪些是 增加 修改 和删除的
     *
     * @param {Array.<Object>} infos loading file info
     * @param {Array|Object} sources loading sources
     * @return {Array.<Object>} loading file info in add modify or remove type
     */


    var getChangeFileInfos = function () {
        var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(infos, sources) {
            var _this2 = this;

            var results, pathsInSources;
            return _regenerator2.default.wrap(function _callee5$(_context5) {
                while (1) {
                    switch (_context5.prev = _context5.next) {
                        case 0:
                            _context5.next = 2;
                            return Promise.all(infos.map(function () {
                                var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(info) {
                                    var exist, type;
                                    return _regenerator2.default.wrap(function _callee3$(_context3) {
                                        while (1) {
                                            switch (_context3.prev = _context3.next) {
                                                case 0:
                                                    _context3.next = 2;
                                                    return app.store.get(FILE_INFOS, info.path);

                                                case 2:
                                                    exist = _context3.sent;
                                                    type = !exist ? 'add' : exist.md5 === info.md5 ? 'nochange' : 'modify';
                                                    return _context3.abrupt('return', Object.assign({}, info, { type: type }));

                                                case 5:
                                                case 'end':
                                                    return _context3.stop();
                                            }
                                        }
                                    }, _callee3, _this2);
                                }));

                                return function (_x5) {
                                    return _ref4.apply(this, arguments);
                                };
                            }()));

                        case 2:
                            results = _context5.sent;


                            results = results.filter(function (result) {
                                return result.type !== 'nochange';
                            });

                            if (!Array.isArray(sources)) {
                                sources = [sources];
                            }

                            _context5.next = 7;
                            return Promise.all(sources.map(function () {
                                var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(source) {
                                    var paths;
                                    return _regenerator2.default.wrap(function _callee4$(_context4) {
                                        while (1) {
                                            switch (_context4.prev = _context4.next) {
                                                case 0:
                                                    _context4.next = 2;
                                                    return app.store.get(FILE_INFOS, FILE_PATHS + '/' + source.name);

                                                case 2:
                                                    paths = _context4.sent;
                                                    return _context4.abrupt('return', [source, paths]);

                                                case 4:
                                                case 'end':
                                                    return _context4.stop();
                                            }
                                        }
                                    }, _callee4, _this2);
                                }));

                                return function (_x6) {
                                    return _ref5.apply(this, arguments);
                                };
                            }()));

                        case 7:
                            pathsInSources = _context5.sent;
                            return _context5.abrupt('return', [].concat((0, _toConsumableArray3.default)(results), (0, _toConsumableArray3.default)(pathsInSources.filter(function (info) {
                                return info[1] != null;
                            }).map(function (pathInfo) {
                                var _pathInfo = (0, _slicedToArray3.default)(pathInfo, 2),
                                    source = _pathInfo[0],
                                    paths = _pathInfo[1];

                                var infoInSources = infos.filter(function (info) {
                                    return info && info.source && info.source.name === source.name;
                                });
                                return paths.filter(function (path) {
                                    return infoInSources.every(function (info) {
                                        return info.path !== path;
                                    });
                                }).map(function (path) {
                                    return {
                                        path: path,
                                        source: source,
                                        type: 'remove'
                                    };
                                });
                            }).reduce(function (arr, deleteInfo) {
                                return [].concat((0, _toConsumableArray3.default)(arr), (0, _toConsumableArray3.default)(deleteInfo));
                            }, []))));

                        case 9:
                        case 'end':
                            return _context5.stop();
                    }
                }
            }, _callee5, this);
        }));

        return function getChangeFileInfos(_x3, _x4) {
            return _ref3.apply(this, arguments);
        };
    }();

    /**
     * update file data
     *
     * @param {string} type data type
     * @param {string} pathListName data name
     * @param {Aarray} infos update data
     * @param {Array|Object} sources loading sources
     */


    var update = function () {
        var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7(type, pathListName, infos, sources) {
            var _this3 = this;

            var _classify, _classify$add, add, _classify$modify, modify, _classify$remove, remove, allPaths;

            return _regenerator2.default.wrap(function _callee7$(_context7) {
                while (1) {
                    switch (_context7.prev = _context7.next) {
                        case 0:
                            _classify = (0, _utils.classify)(infos, function (info) {
                                return info.type;
                            }), _classify$add = _classify.add, add = _classify$add === undefined ? [] : _classify$add, _classify$modify = _classify.modify, modify = _classify$modify === undefined ? [] : _classify$modify, _classify$remove = _classify.remove, remove = _classify$remove === undefined ? [] : _classify$remove;
                            _context7.next = 3;
                            return Promise.all([].concat((0, _toConsumableArray3.default)([].concat((0, _toConsumableArray3.default)(add), (0, _toConsumableArray3.default)(modify)).map(function (info) {
                                return app.store.set(type, info.path, (0, _utils.subset)(info, ['type'], 'ignore'));
                            })), (0, _toConsumableArray3.default)(remove.map(function (info) {
                                return app.store.remove(type, info.path);
                            }))));

                        case 3:

                            if (!Array.isArray(sources)) {
                                sources = [sources];
                            }

                            // 以 source 为范围存储当前 source 下文件路径信息
                            _context7.next = 6;
                            return Promise.all(sources.map(function () {
                                var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6(source) {
                                    var removeInSource, addInSource, paths;
                                    return _regenerator2.default.wrap(function _callee6$(_context6) {
                                        while (1) {
                                            switch (_context6.prev = _context6.next) {
                                                case 0:
                                                    removeInSource = remove.filter(function (info) {
                                                        return info && info.source && info.source.name === source.name;
                                                    });
                                                    addInSource = add.filter(function (info) {
                                                        return info && info.source && info.source.name === source.name;
                                                    });
                                                    _context6.next = 4;
                                                    return app.store.get(type, pathListName + '/' + source.name);

                                                case 4:
                                                    paths = _context6.sent;

                                                    paths = paths && paths.filter(function (path) {
                                                        return removeInSource.every(function (info) {
                                                            return info.path !== path;
                                                        });
                                                    }) || [];

                                                    paths = [].concat((0, _toConsumableArray3.default)(paths), (0, _toConsumableArray3.default)(addInSource.map(function (info) {
                                                        return info.path;
                                                    })));
                                                    paths = Array.from(new Set(paths));

                                                    _context6.next = 10;
                                                    return app.store.set(type, pathListName + '/' + source.name, paths);

                                                case 10:
                                                    return _context6.abrupt('return', paths);

                                                case 11:
                                                case 'end':
                                                    return _context6.stop();
                                            }
                                        }
                                    }, _callee6, _this3);
                                }));

                                return function (_x11) {
                                    return _ref7.apply(this, arguments);
                                };
                            }()));

                        case 6:
                            _context7.next = 8;
                            return app.store.get(type, pathListName);

                        case 8:
                            allPaths = _context7.sent;

                            allPaths = allPaths && allPaths.filter(function (path) {
                                return remove.every(function (info) {
                                    return info.path !== path;
                                });
                            }) || [];
                            allPaths = [].concat((0, _toConsumableArray3.default)(allPaths), (0, _toConsumableArray3.default)(add.map(function (info) {
                                return info.path;
                            })));
                            allPaths = Array.from(new Set(allPaths));

                            _context7.next = 14;
                            return app.store.set(type, pathListName, allPaths);

                        case 14:
                        case 'end':
                            return _context7.stop();
                    }
                }
            }, _callee7, this);
        }));

        return function update(_x7, _x8, _x9, _x10) {
            return _ref6.apply(this, arguments);
        };
    }();

    var FILE_INFOS = 'fileInfos';
    var FILE_PATHS = 'filePaths';
    var ENTRY_INFOS = 'entryInfos';
    var ENTRY_PATHS = 'entryPaths';

    var fileModule = {

        /**
         * 获取单个文件信息
         *
         * @param {string} path 文件路径
         * @return {Object|undefined} 文件对象，查找不到时返回 undefined
         */
        fileInfo: function fileInfo(path) {
            return app.store.get(FILE_INFOS, path);
        },


        /**
         * 获取文件路径信息
         *
         * @param {Function|RegExp|undefined} filter 过滤条件
         * @return {Array|undefined} 文件路径信息列表
         */
        filePaths: function () {
            var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8(filter) {
                var paths;
                return _regenerator2.default.wrap(function _callee8$(_context8) {
                    while (1) {
                        switch (_context8.prev = _context8.next) {
                            case 0:
                                _context8.next = 2;
                                return app.store.get(FILE_INFOS, FILE_PATHS);

                            case 2:
                                paths = _context8.sent;

                                if ((0, _utils.isValidArray)(paths)) {
                                    _context8.next = 5;
                                    break;
                                }

                                return _context8.abrupt('return', paths);

                            case 5:
                                _context8.t0 = typeof filter === 'undefined' ? 'undefined' : (0, _typeof3.default)(filter);
                                _context8.next = _context8.t0 === 'function' ? 8 : _context8.t0 === 'object' ? 9 : 10;
                                break;

                            case 8:
                                return _context8.abrupt('return', paths.filter(filter));

                            case 9:
                                return _context8.abrupt('return', paths.filter(function (path) {
                                    return filter.test(path);
                                }));

                            case 10:
                                return _context8.abrupt('return', paths);

                            case 11:
                            case 'end':
                                return _context8.stop();
                        }
                    }
                }, _callee8, this);
            }));

            function filePaths(_x12) {
                return _ref8.apply(this, arguments);
            }

            return filePaths;
        }(),


        /**
         * 获取文件信息
         *
         * @param {Function|RegExp|undefined} filter 过滤条件
         * @return {Array|undefined} 文件信息列表
         */
        fileInfos: function () {
            var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9(filter) {
                var paths;
                return _regenerator2.default.wrap(function _callee9$(_context9) {
                    while (1) {
                        switch (_context9.prev = _context9.next) {
                            case 0:
                                paths = void 0;

                                if (!Array.isArray(filter)) {
                                    _context9.next = 5;
                                    break;
                                }

                                paths = filter;
                                _context9.next = 8;
                                break;

                            case 5:
                                _context9.next = 7;
                                return fileModule.filePaths(filter);

                            case 7:
                                paths = _context9.sent;

                            case 8:
                                if (!(0, _utils.isValidArray)(paths)) {
                                    _context9.next = 12;
                                    break;
                                }

                                _context9.next = 11;
                                return Promise.all(paths.map(function (path) {
                                    return fileModule.fileInfo(path);
                                }));

                            case 11:
                                return _context9.abrupt('return', _context9.sent);

                            case 12:
                            case 'end':
                                return _context9.stop();
                        }
                    }
                }, _callee9, this);
            }));

            function fileInfos(_x13) {
                return _ref9.apply(this, arguments);
            }

            return fileInfos;
        }(),


        /**
         * 获取入口文件信息
         *
         * @param {string} path 入口文件路径
         * @return {Object|undefined} 入口文件信息
         */
        entryInfo: function entryInfo(path) {
            return app.store.get(ENTRY_INFOS, path);
        },


        /**
         * 获取入口文件（.md）路径列表
         *
         * @param {Function|RegExp} filter 过滤条件
         * @return {Array|undefined} 入口文件路径列表
         */
        entryPaths: function () {
            var _ref10 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee10(filter) {
                var paths;
                return _regenerator2.default.wrap(function _callee10$(_context10) {
                    while (1) {
                        switch (_context10.prev = _context10.next) {
                            case 0:
                                _context10.next = 2;
                                return app.store.get(ENTRY_INFOS, ENTRY_PATHS);

                            case 2:
                                paths = _context10.sent;

                                if ((0, _utils.isValidArray)(paths)) {
                                    _context10.next = 5;
                                    break;
                                }

                                return _context10.abrupt('return', paths);

                            case 5:
                                _context10.t0 = typeof filter === 'undefined' ? 'undefined' : (0, _typeof3.default)(filter);
                                _context10.next = _context10.t0 === 'function' ? 8 : _context10.t0 === 'object' ? 9 : 10;
                                break;

                            case 8:
                                return _context10.abrupt('return', paths.filter(filter));

                            case 9:
                                return _context10.abrupt('return', paths.filter(function (path) {
                                    return filter.test(path);
                                }));

                            case 10:
                                return _context10.abrupt('return', paths);

                            case 11:
                            case 'end':
                                return _context10.stop();
                        }
                    }
                }, _callee10, this);
            }));

            function entryPaths(_x14) {
                return _ref10.apply(this, arguments);
            }

            return entryPaths;
        }(),


        /**
         * 获取入口文件（.md）信息
         *
         * @param {Function|RegExp} filter 过滤条件
         * @return {Array|undefined} 入口文件信息
         */
        entryInfos: function () {
            var _ref11 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee11(filter) {
                var paths;
                return _regenerator2.default.wrap(function _callee11$(_context11) {
                    while (1) {
                        switch (_context11.prev = _context11.next) {
                            case 0:
                                paths = void 0;

                                if (!Array.isArray(filter)) {
                                    _context11.next = 5;
                                    break;
                                }

                                paths = filter;
                                _context11.next = 8;
                                break;

                            case 5:
                                _context11.next = 7;
                                return fileModule.entryPaths(filter);

                            case 7:
                                paths = _context11.sent;

                            case 8:
                                if (!(0, _utils.isValidArray)(paths)) {
                                    _context11.next = 12;
                                    break;
                                }

                                _context11.next = 11;
                                return Promise.all(paths.map(function (path) {
                                    return fileModule.entryInfo(path);
                                }));

                            case 11:
                                return _context11.abrupt('return', _context11.sent);

                            case 12:
                            case 'end':
                                return _context11.stop();
                        }
                    }
                }, _callee11, this);
            }));

            function entryInfos(_x15) {
                return _ref11.apply(this, arguments);
            }

            return entryInfos;
        }(),
        process: function () {
            var _ref12 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee12() {
                var sources = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : app.config.sources;
                var hook, infos, entryInfos, typeMap;
                return _regenerator2.default.wrap(function _callee12$(_context12) {
                    while (1) {
                        switch (_context12.prev = _context12.next) {
                            case 0:
                                hook = app.module.hook;

                                // step 1. 加载源文件并转换成文件对象

                                _context12.next = 3;
                                return getFileInfos(sources);

                            case 3:
                                infos = _context12.sent;
                                _context12.next = 6;
                                return hook.exec(_stage.GET_ORIGINAL_FILES, infos);

                            case 6:
                                infos = _context12.sent;
                                _context12.next = 9;
                                return getChangeFileInfos(infos, sources);

                            case 9:
                                infos = _context12.sent;
                                _context12.next = 12;
                                return hook.exec(_stage.GET_CHANGED_FILES, infos);

                            case 12:
                                infos = _context12.sent;
                                _context12.next = 15;
                                return update(FILE_INFOS, FILE_PATHS, infos, sources);

                            case 15:

                                // step 3. 找出变化的文档信息
                                entryInfos = infos.filter(function (info) {
                                    return _path2.default.extname(info.path) === '.md';
                                });
                                _context12.next = 18;
                                return hook.exec(_stage.GET_CHANGED_ENTRY_FILES, entryInfos);

                            case 18:
                                entryInfos = _context12.sent;
                                _context12.next = 21;
                                return update(ENTRY_INFOS, ENTRY_PATHS, entryInfos, sources);

                            case 21:
                                _context12.next = 23;
                                return hook.exec(_stage.AFTER_FILE_PROCESS);

                            case 23:
                                typeMap = {
                                    remove: 'remove',
                                    add: 'change',
                                    modify: 'change'
                                };

                                // 将变化的文档分类并返回给下一步

                                return _context12.abrupt('return', (0, _utils.classify)(entryInfos, function (_ref13) {
                                    var type = _ref13.type;
                                    return typeMap[type];
                                }));

                            case 25:
                            case 'end':
                                return _context12.stop();
                        }
                    }
                }, _callee12, this);
            }));

            function process() {
                return _ref12.apply(this, arguments);
            }

            return process;
        }()
    };

    app.addModule('file', function () {
        return fileModule;
    });
};

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _utils = require('../utils');

var _stage = require('./hook/stage');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var WHITE_LIST = ['.md', '.json', '.html', '.xml', '.tpl', '.txt']; /**
                                                                     * @file file manager
                                                                     * @author tanglei (tanglei02@baidu.com)
                                                                     * @description 处理文件过滤的模块，对于 loader 载入的文档，
                                                                     * 通过该模块会与旧文档进行匹配，过滤出有改动的文件进行下一步的编译操作
                                                                     */

function createMD5(str) {
    return _crypto2.default.createHash('md5').update(str).digest('hex');
}