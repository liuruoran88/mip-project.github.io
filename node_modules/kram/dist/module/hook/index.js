'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

exports.default = function (app) {

    var hook = {

        get STAGES() {
            return _stage.STAGES;
        },

        /**
         * 触发异步执行的钩子
         *
         * @param {string} stage 钩子名称
         * @param {*} data 钩子要处理的数据
         * @param {*} options 处理数据的相关参数
         * @return {*} 处理好的数据
         */
        exec: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(stage, data, options) {
                var _app$module, event, plugin, result;

                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _app$module = app.module, event = _app$module.event, plugin = _app$module.plugin;
                                result = void 0;

                                if (!(0, _utils.startWith)(stage, 'before')) {
                                    _context.next = 9;
                                    break;
                                }

                                event.emit(stage, data, options);
                                _context.next = 6;
                                return plugin.exec(stage, data, options);

                            case 6:
                                result = _context.sent;
                                _context.next = 13;
                                break;

                            case 9:
                                _context.next = 11;
                                return plugin.exec(stage, data, options);

                            case 11:
                                result = _context.sent;

                                event.emit(stage, data, options);

                            case 13:
                                return _context.abrupt('return', result);

                            case 14:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function exec(_x, _x2, _x3) {
                return _ref.apply(this, arguments);
            }

            return exec;
        }(),


        /**
         * 触发同步执行的钩子
         *
         * @param {string} stage 钩子名称
         * @param {*} data 钩子要处理的数据
         * @param {*} options 处理数据的相关参数
         * @return {*} 处理好的数据
         */
        execSync: function execSync(stage, data, options) {
            var _app$module2 = app.module,
                event = _app$module2.event,
                plugin = _app$module2.plugin;

            var result = void 0;

            if ((0, _utils.startWith)(stage, 'before')) {
                event.emit(stage, data, options);
                result = plugin.execSync(stage, data, options);
            } else {
                result = plugin.execSync(stage, data, options);
                event.emit(stage, data, options);
            }

            return result;
        }
    };

    app.addModule('hook', function () {
        return hook;
    });
};

var _utils = require('../../utils');

var _stage = require('./stage');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }