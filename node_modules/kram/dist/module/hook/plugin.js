'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

exports.default = function (app) {
    var list = {};
    var hooks = {};

    var plugin = {
        get hooks() {
            return hooks;
        },

        getHook: function getHook(stage) {
            return hooks[stage];
        },


        get list() {
            return list;
        },

        get default() {
            return app.default.config.plugin;
        },

        /**
         * 注册钩子事件
         *
         * @param {string} name 插件名称
         * @param {Object} plugin 插件对象
         */
        register: function register(name, plugin) {
            if (list[name]) {
                app.logger.info('[kram][plugin] ' + name + ' has registered.');
                return;
            }

            // 每个插件通过实现 apply 函数去注册钩子:
            //
            // pluginDemo.apply = function (on, app) {
            //      on(STAGE_NAME, function () {}, 1) ...
            // }

            plugin.apply(function (stage, fn) {
                var priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 999;

                if (!_stage.STAGE_SET.has(stage)) {
                    return;
                }

                hooks[stage] = hooks[stage] || [];
                hooks[stage].push({ priority: priority, fn: fn, name: name });
                hooks[stage].sort(function (a, b) {
                    return a.priority - b.priority;
                });
            }, app);

            list[name] = plugin;
        },


        /**
         * 触发钩子事件
         *
         * @param {string} stage 钩子名称
         * @param {*} data 钩子要处理的数据
         * @param {*} options 处理数据的相关参数
         * @return {*} 处理好的数据
         */
        exec: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(stage, data, options) {
                var hook, i, val;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                hook = hooks[stage];

                                if ((0, _utils.isValidArray)(hook)) {
                                    _context.next = 3;
                                    break;
                                }

                                return _context.abrupt('return', data);

                            case 3:
                                i = 0;

                            case 4:
                                if (!(i < hook.length)) {
                                    _context.next = 19;
                                    break;
                                }

                                _context.prev = 5;
                                _context.next = 8;
                                return hook[i].fn(data, options);

                            case 8:
                                val = _context.sent;

                                if (val != null) {
                                    data = val;
                                }
                                _context.next = 16;
                                break;

                            case 12:
                                _context.prev = 12;
                                _context.t0 = _context['catch'](5);

                                app.logger.error('Plugin: ' + hook[i].name + ' occur ERROR in stage: ' + stage);
                                app.logger.error(_context.t0);

                            case 16:
                                i++;
                                _context.next = 4;
                                break;

                            case 19:
                                return _context.abrupt('return', data);

                            case 20:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this, [[5, 12]]);
            }));

            function exec(_x2, _x3, _x4) {
                return _ref.apply(this, arguments);
            }

            return exec;
        }(),


        /**
         * 触发钩子事件并同步执行
         *
         * @param {string} stage 钩子名称
         * @param {*} data 钩子要处理的数据
         * @param {*} options 处理数据的相关参数
         * @return {*} 处理好的数据
         */
        execSync: function execSync(stage, data, options) {
            var hook = hooks[stage];

            if (!(0, _utils.isValidArray)(hook)) {
                return data;
            }

            for (var i = 0; i < hook.length; i++) {
                try {
                    var val = hook[i].fn(data, options);
                    if (val != null) {
                        data = val;
                    }
                } catch (e) {
                    app.logger.error('Plugin: ' + hook[i].name + ' occur ERROR in stage: ' + stage);
                    app.logger.error(e);
                }
            }

            return data;
        }
    };

    app.addModule('plugin', function () {
        return plugin;
    });

    return function () {
        var plugins = Object.assign({}, plugin.default, app.config.plugin);
        (0, _utils.each)(plugins, plugin.register);
    };
};

var _utils = require('../../utils');

var _stage = require('./stage');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }